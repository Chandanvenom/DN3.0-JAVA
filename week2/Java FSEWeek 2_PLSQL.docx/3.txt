Scenario 1: Process Monthly Interest for All Savings Accounts
plsql

CREATE OR REPLACE PROCEDURE ProcessMonthlyInterest IS
BEGIN
    -- Apply interest rate of 1% to all savings accounts
    UPDATE accounts
    SET balance = balance * 1.01
    WHERE account_type = 'Savings';
    
    -- Commit the transaction to save changes
    COMMIT;
END ProcessMonthlyInterest;
/
Scenario 2: Update Employee Bonus
plsql
Copy code
CREATE OR REPLACE PROCEDURE UpdateEmployeeBonus(
    p_department_id IN NUMBER,
    p_bonus_percentage IN NUMBER
) IS
BEGIN
    -- Update salary for all employees in the given department
    UPDATE employees
    SET salary = salary + (salary * p_bonus_percentage / 100)
    WHERE department_id = p_department_id;
    
    -- Commit the transaction to save changes
    COMMIT;
END UpdateEmployeeBonus;
/
Scenario 3: Transfer Funds Between Accounts
plsql

CREATE OR REPLACE PROCEDURE TransferFunds(
    p_from_account_id IN NUMBER,
    p_to_account_id IN NUMBER,
    p_amount IN NUMBER
) IS
    v_from_balance NUMBER;
BEGIN
    -- Begin transaction
    BEGIN
        -- Get the current balance of the from account
        SELECT balance INTO v_from_balance
        FROM accounts
        WHERE account_id = p_from_account_id FOR UPDATE;

        -- Check if sufficient funds are available
        IF v_from_balance < p_amount THEN
            RAISE_APPLICATION_ERROR(-20001, 'Insufficient funds in the source account.');
        END IF;

        -- Deduct funds from the from account
        UPDATE accounts
        SET balance = balance - p_amount
        WHERE account_id = p_from_account_id;

        -- Add funds to the to account
        UPDATE accounts
        SET balance = balance + p_amount
        WHERE account_id = p_to_account_id;

        -- Commit transaction
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            -- Rollback transaction on error
            ROLLBACK;
            -- Log the error
            DBMS_OUTPUT.PUT_LINE('Error during fund transfer: ' || SQLERRM);
            RAISE;
    END;
END TransferFunds;
/
Explanation
Scenario 1: ProcessMonthlyInterest

This procedure updates the balance of all accounts with the type 'Savings' by applying a 1% interest rate.
The transaction is committed to save the changes.
Scenario 2: UpdateEmployeeBonus

This procedure updates the salary of employees in a specified department by adding a bonus based on the provided percentage.
The transaction is committed to save the changes.
Scenario 3: TransferFunds

This procedure transfers a specified amount from one account to another.
It checks if there are sufficient funds in the source account.
Updates both accounts and commits the transaction. If an error occurs, it rolls back the transaction and logs the error.