Task Management System: Exercise 5
1. Understand Linked Lists:
Different Types of Linked Lists:

Singly Linked List:

Description: A singly linked list is a type of linked list where each node points to the next node in the sequence. The list starts with a head node and ends with a null reference.
Structure:
Node: Contains data and a reference (or pointer) to the next node.
Head: Points to the first node of the list.
Tail: Optional in a singly linked list but can be used to keep a reference to the last node.
Advantages: Simple structure, easy to implement.
Doubly Linked List:

Description: A doubly linked list extends the singly linked list by having two references in each node: one pointing to the next node and one pointing to the previous node.
Structure:
Node: Contains data, a reference to the next node, and a reference to the previous node.
Head: Points to the first node.
Tail: Points to the last node.
Advantages: Allows traversal in both directions (forward and backward), easier deletion of nodes with known references.
Comparison:

Singly Linked List: Simple and uses less memory per node, but only supports forward traversal and requires extra work for operations like deletion.
Doubly Linked List: More flexible with bi-directional traversal but uses more memory per node due to the additional reference to the previous node.
2. Setup:
Create a Task class with attributes such as taskId, taskName, and status.

Task Class Definition:

java

public class Task {
    private String taskId;
    private String taskName;
    private String status;

    // Constructor
    public Task(String taskId, String taskName, String status) {
        this.taskId = taskId;
        this.taskName = taskName;
        this.status = status;
    }

    // Getters and Setters
    public String getTaskId() {
        return taskId;
    }

    public void setTaskId(String taskId) {
        this.taskId = taskId;
    }

    public String getTaskName() {
        return taskName;
    }

    public void setTaskName(String taskName) {
        this.taskName = taskName;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    @Override
    public String toString() {
        return "Task{" +
                "taskId='" + taskId + '\'' +
                ", taskName='" + taskName + '\'' +
                ", status='" + status + '\'' +
                '}';
    }
}
3. Implementation:
Singly Linked List Implementation:

java

public class TaskManagementSystem {
    private Node head;
    private int size;

    // Node class
    private class Node {
        Task task;
        Node next;

        Node(Task task) {
            this.task = task;
            this.next = null;
        }
    }

    // Constructor
    public TaskManagementSystem() {
        this.head = null;
        this.size = 0;
    }

    // Add a task
    public void addTask(Task task) {
        Node newNode = new Node(task);
        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
        size++;
    }

    // Search for a task by taskId
    public Task searchTask(String taskId) {
        Node current = head;
        while (current != null) {
            if (current.task.getTaskId().equals(taskId)) {
                return current.task;
            }
            current = current.next;
        }
        return null; // Not found
    }

    // Traverse and print all tasks
    public void traverseTasks() {
        Node current = head;
        while (current != null) {
            System.out.println(current.task);
            current = current.next;
        }
    }

    // Delete a task by taskId
    public void deleteTask(String taskId) {
        if (head == null) return;

        if (head.task.getTaskId().equals(taskId)) {
            head = head.next;
            size--;
            return;
        }

        Node current = head;
        while (current.next != null && !current.next.task.getTaskId().equals(taskId)) {
            current = current.next;
        }

        if (current.next != null) {
            current.next = current.next.next;
            size--;
        }
    }

    public static void main(String[] args) {
        TaskManagementSystem tms = new TaskManagementSystem();

        // Add tasks
        tms.addTask(new Task("1", "Design", "In Progress"));
        tms.addTask(new Task("2", "Development", "Not Started"));
        tms.addTask(new Task("3", "Testing", "Completed"));

        // Traverse tasks
        System.out.println("All Tasks:");
        tms.traverseTasks();

        // Search for a task
        System.out.println("Searching for Task with ID 2:");
        Task task = tms.searchTask("2");
        if (task != null) {
            System.out.println(task);
        } else {
            System.out.println("Task not found.");
        }

        // Delete a task
        System.out.println("Deleting Task with ID 1.");
        tms.deleteTask("1");

        // Traverse tasks after deletion
        System.out.println("All Tasks after deletion:");
        tms.traverseTasks();
    }
}
4. Analysis:
Time Complexity of Operations:

Add Operation:

Time Complexity: O(n) – Inserting at the end of the list requires traversing the list to find the last node.
Space Complexity: O(1) – Only additional memory for the new node is used.
Search Operation:

Time Complexity: O(n) – In the worst case, every node must be checked until the task is found or the end of the list is reached.
Space Complexity: O(1) – Only the current node reference is used.
Traverse Operation:

Time Complexity: O(n) – Every node must be visited to traverse the entire list.
Space Complexity: O(1) – The traversal uses constant space.
Delete Operation:

Time Complexity: O(n) – Finding the node to delete requires traversing the list, and if the node is not at the head, it requires updating the next reference of the previous node.
Space Complexity: O(1) – Only the reference to the node to be deleted is needed.
Advantages of Linked Lists Over Arrays for Dynamic Data:

Dynamic Size: Linked lists can grow and shrink dynamically, making them more flexible for applications where the number of elements changes frequently.
Efficient Insertions and Deletions: Insertions and deletions are more efficient in linked lists, especially if the operation is near the head of the list. This is because it does not require shifting elements as in arrays.
No Predefined Size: Unlike arrays, linked lists do not require predefined sizes and can adjust their size as needed.
Limitations of Linked Lists:

Memory Overhead: Each node requires additional memory for storing the reference to the next node, which can be significant compared to arrays.
Sequential Access: Linked lists do not support random access. To access an element, you must traverse the list from the head, which can be inefficient for large lists.