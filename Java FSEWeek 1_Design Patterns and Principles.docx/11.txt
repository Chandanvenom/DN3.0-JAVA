Step 1: Create a New Java Project
First, create a new Java project named DependencyInjectionExample in your preferred IDE.

Step 2: Define Repository Interface
Create an interface named CustomerRepository with methods like findCustomerById().

java

public interface CustomerRepository {
    Customer findCustomerById(String id);
}
Step 3: Implement Concrete Repository
Create a class CustomerRepositoryImpl that implements CustomerRepository.

java

public class CustomerRepositoryImpl implements CustomerRepository {
    @Override
    public Customer findCustomerById(String id) {
        // Simulate finding a customer by id
        return new Customer(id, "John Doe");
    }
}
Step 4: Define Service Class
Create a class CustomerService that depends on CustomerRepository.

java

public class CustomerService {
    private final CustomerRepository customerRepository;

    // Constructor injection
    public CustomerService(CustomerRepository customerRepository) {
        this.customerRepository = customerRepository;
    }

    public Customer getCustomerById(String id) {
        return customerRepository.findCustomerById(id);
    }
}
Step 5: Implement Dependency Injection
Use constructor injection to inject CustomerRepository into CustomerService.

Step 6: Test the Dependency Injection Implementation
Create a main class to demonstrate creating a CustomerService with CustomerRepositoryImpl and using it to find a customer.

Customer Class
java

public class Customer {
    private String id;
    private String name;

    public Customer(String id, String name) {
        this.id = id;
        this.name = name;
    }

    // Getters
    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "Customer{id='" + id + "', name='" + name + "'}";
    }
}
Main Class
java

public class DependencyInjectionExample {
    public static void main(String[] args) {
        // Create the repository
        CustomerRepository customerRepository = new CustomerRepositoryImpl();
        
        // Inject the repository into the service
        CustomerService customerService = new CustomerService(customerRepository);
        
        // Use the service to find a customer
        Customer customer = customerService.getCustomerById("123");
        System.out.println(customer);
    }
}
Explanation
Repository Interface (CustomerRepository): Defines methods to interact with the data source, such as findCustomerById().
Concrete Repository (CustomerRepositoryImpl): Implements CustomerRepository and provides the actual data access logic.
Service Class (CustomerService): Depends on CustomerRepository to perform business logic.
Dependency Injection: Uses constructor injection to inject CustomerRepository into CustomerService, promoting loose coupling and easier testing.
Customer Class: Represents a customer entity with attributes id and name.
Main Class (DependencyInjectionExample): Demonstrates creating and using the service with the repository injected.