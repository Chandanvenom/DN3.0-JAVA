Step 1: Create a New Java Project
First, create a new Java project named AdapterPatternExample in your preferred IDE.

Step 2: Define Target Interface
Create an interface named PaymentProcessor with methods like processPayment().

java

public interface PaymentProcessor {
    void processPayment(double amount);
}
Step 3: Implement Adaptee Classes
Create classes for different payment gateways with their own methods.

PayPal Payment Gateway
java

public class PayPal {
    public void makePayment(double amount) {
        System.out.println("Processing payment of $" + amount + " through PayPal.");
    }
}
Stripe Payment Gateway

public class Stripe {
    public void makePayment(double amount) {
        System.out.println("Processing payment of $" + amount + " through Stripe.");
    }
}
Step 4: Implement the Adapter Class
Create an adapter class for each payment gateway that implements PaymentProcessor and translates the calls to the gateway-specific methods.

PayPal Adapter
java

public class PayPalAdapter implements PaymentProcessor {
    private PayPal payPal;

    public PayPalAdapter(PayPal payPal) {
        this.payPal = payPal;
    }

    @Override
    public void processPayment(double amount) {
        payPal.makePayment(amount);
    }
}
Stripe Adapter

public class StripeAdapter implements PaymentProcessor {
    private Stripe stripe;

    public StripeAdapter(Stripe stripe) {
        this.stripe = stripe;
    }

    @Override
    public void processPayment(double amount) {
        stripe.makePayment(amount);
    }
}
Step 5: Test the Adapter Implementation
Create a test class to demonstrate the use of different payment gateways through the adapter.


public class AdapterPatternTest {
    public static void main(String[] args) {
        // Using PayPal through the adapter
        PayPal payPal = new PayPal();
        PaymentProcessor payPalAdapter = new PayPalAdapter(payPal);
        payPalAdapter.processPayment(100.0);

        // Using Stripe through the adapter
        Stripe stripe = new Stripe();
        PaymentProcessor stripeAdapter = new StripeAdapter(stripe);
        stripeAdapter.processPayment(200.0);
    }
}
Explanation
Target Interface (PaymentProcessor): Defines the standard method processPayment().
Adaptee Classes (PayPal, Stripe): These classes have their own methods that need to be adapted.
Adapter Classes (PayPalAdapter, StripeAdapter): Implement PaymentProcessor and translate the processPayment() call to the respective gateway-specific methods.
Test Class (AdapterPatternTest): Demonstrates how to use the adapters to process payments through different gateways.