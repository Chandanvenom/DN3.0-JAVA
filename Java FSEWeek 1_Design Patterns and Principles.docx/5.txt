Step 1: Create a New Java Project
First, create a new Java project named DecoratorPatternExample in your preferred IDE.

Step 2: Define Component Interface
Create an interface named Notifier with a method send().

java

public interface Notifier {
    void send(String message);
}
Step 3: Implement Concrete Component
Create a class EmailNotifier that implements Notifier.

java

public class EmailNotifier implements Notifier {
    @Override
    public void send(String message) {
        System.out.println("Sending email notification: " + message);
    }
}
Step 4: Implement Decorator Classes
Create an abstract decorator class NotifierDecorator that implements Notifier and holds a reference to a Notifier object.

java

public abstract class NotifierDecorator implements Notifier {
    protected Notifier wrapped;

    public NotifierDecorator(Notifier wrapped) {
        this.wrapped = wrapped;
    }

    @Override
    public void send(String message) {
        wrapped.send(message);
    }
}
SMS Notifier Decorator
Create a concrete decorator class SMSNotifierDecorator that extends NotifierDecorator.

java
public class SMSNotifierDecorator extends NotifierDecorator {

    public SMSNotifierDecorator(Notifier wrapped) {
        super(wrapped);
    }

    @Override
    public void send(String message) {
        super.send(message);
        sendSMS(message);
    }

    private void sendSMS(String message) {
        System.out.println("Sending SMS notification: " + message);
    }
}
Slack Notifier Decorator
Create a concrete decorator class SlackNotifierDecorator that extends NotifierDecorator.


public class SlackNotifierDecorator extends NotifierDecorator {

    public SlackNotifierDecorator(Notifier wrapped) {
        super(wrapped);
    }

    @Override
    public void send(String message) {
        super.send(message);
        sendSlackMessage(message);
    }

    private void sendSlackMessage(String message) {
        System.out.println("Sending Slack notification: " + message);
    }
}
Step 5: Test the Decorator Implementation
Create a test class to demonstrate sending notifications via multiple channels using decorators.

java

public class DecoratorPatternTest {
    public static void main(String[] args) {
        // Create an EmailNotifier
        Notifier emailNotifier = new EmailNotifier();

        // Decorate the emailNotifier with SMS functionality
        Notifier smsNotifier = new SMSNotifierDecorator(emailNotifier);

        // Decorate the smsNotifier with Slack functionality
        Notifier slackNotifier = new SlackNotifierDecorator(smsNotifier);

        // Send a notification via Email, SMS, and Slack
        slackNotifier.send("This is a test message.");
    }
}
Explanation
Component Interface (Notifier): Defines the standard method send().
Concrete Component (EmailNotifier): Implements Notifier and provides the base notification functionality.
Decorator Classes:
NotifierDecorator: An abstract class that implements Notifier and holds a reference to a Notifier object. It delegates the send() call to the wrapped Notifier.
SMSNotifierDecorator: Extends NotifierDecorator and adds SMS notification functionality.
SlackNotifierDecorator: Extends NotifierDecorator and adds Slack notification functionality.
Test Class (DecoratorPatternTest): Demonstrates how to use the decorators to send notifications via multiple channels.
This implementation allows you to add new notification channels dynamically without mod